|0000
@n_pages $2
@bit_idx $2
@idx $2
@error $1

|0100
( unit tests )


test-malloc

BRK

@malloc ( n_bytes* -- <allocation in bytes> )
    ( You are free to change this part but there should be no need )
    #00 .error STZ
    DUP2 ( n_bytes* n_bytes* )
    DUP2 ( n_bytes* n_bytes* n_bytes* )
    #0000 NEQ2 ,&cont1 JCN
        POP2 POP2
        #01 .error STZ
        #0000 JMP2r
    &cont1 ( n_bytes* n_bytes* )
    #0001 SUB2 PAGE_SZ DIV2 #0001 ADD2 .n_pages STZ2 ( n_bytes* n_pages = ((n_bytes-1) // PAGE_SZ) + 1 )
    .n_pages LDZ2 N_PAGES GTH2 not ,&cont2 JCN ( n_pages>N_PAGES )
        POP2
        #07 .error STZ
        #0000 JMP2r
    &cont2
    #0000 ;&idx STA2 ( n_bytes* ) ( idx=0 )

    ( loop over idx )

    &loop
        ;&idx LDA2 N_PAGES EQU2 ;&done JCN
            ;&idx LDA2 .n_pages LDZ2
            alloc_sz_is_free_at_idx
            #0001 NEQ2 ;&next_idx JCN
                .error LDZ #00 EQU ,&cont3 JCN
                    POP2 #0000 JMP2r
                &cont3
                POP2
                ;&idx LDA2 .n_pages LDZ2
                claim_alloc_sz_at_idx
                ;n_allocs LDA2 MAX_N_ALLOCS EQU2 ;&error5 JCN
                    ;n_allocs LDA2 INC2 ;n_allocs STA2
                    insert-ptr POP
                    JMP2r
            &next_idx
                ;&idx LDA2 INC2 ;&idx STA2
                ;&loop JMP
          &done
            POP2 #0000
            JMP2r
        &error5
            POP2
            #05 .error STZ
            #0000 JMP2r
    JMP2r
    &idx $2


@free (  ptr* --  )
    (  You are free to change this part but there should be no need  )
    DUP2 ;&ptr STA2 (  ptr*  )
    DMEM_START SUB2 PAGE_SZ DIV2 ;&idx STA2k (  idx* = ( ptr-DMEM_START ) // PAGE_SZ  )
    (  if idx<0 or idx>N_PAGES-1: error=2  )
    DUP2 DUP2 (  idx* idx* idx*  )
    #0000 LTH2 (  idx* idx* idx<0  )
    ROT ROT (  idx* idx<0 idx*  )
    N_PAGES #0001 SUB2 GTH2 (  idx* idx<0 idx>N_PAGES-1  )
    ORA not ,&cont JCN (  idx*  )
        #02 .error STZ
        JMP2r
    &cont (  idx*  )
    (  this corresponds to
        if ptr in allocated
     )
    ;&ptr LDA2 lookup-ptr
    (  check if lookup-ptr returned 0000
        if so, error=0 else error=6
     )
    DUP2 #0000 EQU2 ,&error6 JCN (  idx* n_bytes*  )
    #00 .error STZ

    #0001 SUB2 PAGE_SZ DIV2 #0001 ADD2  ( idx* n_pages )
    free_alloc_sz_at_idx
    ;&ptr LDA2 delete-ptr POP
    ;n_allocs LDA2 #0001 SUB2 ;n_allocs STA2
    JMP2r
    &error6
        #06 .error STZ
    JMP2r
&ptr $2
&idx $2


@free_alloc_sz_at_idx (  idx* alloc_sz* -:  )
    ;alloc_sz2 STA2
    ;idx2 STA2
    #0000 ;place2 STA2

    &loop
        ;place2 LDA2
        ;alloc_sz2 LDA2
        EQU2 ,&done JCN

        POP2
        ;place2 LDA2 ;idx2 LDA2 ADD2
        clear_bit

        ;place2 LDA2 INC2 ;place2 STA2
        ,&loop JMP

    &done
    POP2
    JMP2r
    @alloc_sz2 $2
    @idx2 $2
    @place2 $2



@delete-ptr ( ptr* -: bool )
#0000 ;&i STA2
&loop
    ;&i LDA2 #0080 EQU2 ,&full JCN
    DUP2 ( ptr ptr )
    ;&i LDA2 ;allocated ADD2 DUP2 LDA2 ROT2 EQU2 ,&done JCN ( allocated+i )
    POP2
    ;&i LDA2 #0004 ADD2 ;&i STA2
,&loop JMP
&done
DUP2 ( ptr allocated+i allocated+i )
#0002 ADD2 ( ptr allocated+i allocated+i+2 )
#0000 SWP2 STA2 ( ptr allocated+i )
#0000 SWP2 STA2 ( ptr )
POP2
#01 JMP2r
&full
POP2
#00 JMP2r
&i $2



@clear_bit (  idx --  )
(  new code  )
;&idx STA2 ;&idx LDA2 #03 SFT2 ;&byte_idx STA2
#0007 ;&idx LDA2 SUB2 ;&byte_idx LDA2 #30 SFT2 ADD2 ;&bit_idx STA2
;bitmap ;&byte_idx LDA2 ADD2 LDA ;&byte STA

;&bit_idx LDA mask_clear ;&byte AND ;bitmap ;&byte_idx LDA2 ADD2 LDA STA (  stack:   ) (  load byte needed do or with mask so whole byte is correct then store it  )
JMP2r

&idx $2
&byte_idx $2
&bit_idx $2
&byte $1


@mask_clear (  bit_idx* -: mask  )
.bit_idx STZ2 #ff [ #01 .bit_idx LDZ2 NIP #40 SFT SFT ] EOR
JMP2r



@get-error
    .error LDZ
    JMP2r


@lookup-ptr ( ptr* -: alloc_sz* )
#0000 ;&i STA2
&loop
    ;&i LDA2 #0080 EQU2 ,&full JCN
    DUP2 ( ptr ptr )
    ;&i LDA2 ;allocated ADD2 DUP2 LDA2 ( ptr ptr allocated+i ptr_idx_LDA2 )
    ROT2 EQU2 ,&done JCN ( ptr allocated+i )
    POP2
    ;&i LDA2 #0004 ADD2 ;&i STA2
,&loop JMP
&done
#0002 ADD2 LDA2 NIP2
JMP2r
&full
#0000
JMP2r
&i $2




@set_bit (  idx --  )
;&idx STA2 ;&idx LDA2 #03 SFT2 ;&byte_idx STA2
#0007 ;&idx LDA2 SUB2 ;&byte_idx LDA2 #30 SFT2 ADD2 ;&bit_idx STA2
;bitmap ;&byte_idx LDA2 ADD2 LDA ;&byte STA

;&bit_idx LDA mask_set ;&byte ORA ;bitmap ;&byte_idx LDA2 ADD2 LDA STA (  stack:   ) (  load byte needed do or with mask so whole byte is correct then store it  )
JMP2r

&idx $2
&byte_idx $2
&bit_idx $2
&byte $1


@reset
    #00 .error STZ
    #0000 ;n_allocs STA2
    clear-bitmap
    clear-allocation
    clear-vmem


@clear-bitmap
#0000 .idx STZ2 (  #0000 is being stored to .idx  )
&loop ( loop start )
.idx LDZ2 N_PAGES #03 SFT2 EQU2 ,&done JCN (  get value of idx and load it  )
(  put #0040 on the stack. Check if idx is equal - have we got to end of bitmap.  )
(  If true jump to done, else continue with loop  )

#00 .idx LDZ2 ;bitmap ADD2 STA2
(  loads #00 on the stack, loads idx, loads bitmap start  )
(  idx and bitmap are added to get correct bit position  )
(  00 is stored at this position  )

.idx LDZ2 INC2 .idx STZ2
(  load value at idx and increment by 1, store this back at idx  )

,&loop JMP (  loop continues until all values are zero  )
&done
JMP2r



@clear-vmem
#0000 ,&idx STR2
&loop
,&idx LDR2 MAX_ALLOC_SZ EQU2 ,&done JCN
#00 ,&idx LDR2 ;vmem ADD2 STA
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2


@clear-allocation
#0000 ;&i STA2
&loop
;&i LDA2 #0080 EQU2 ,&done JCN ( stop when the map is full ) ( alloc_sz* ptr* )
    #0000 ;&i LDA2 ;allocated ADD2 STA2
    #0000 ;&i LDA2 #0002 ADD2 ;allocated ADD2 STA2
    ;&i LDA2 #0004 ADD2 ;&i STA2
,&loop JMP
&done
JMP2r
&i $2






@mask_set (  bit_idx* -: mask  )
;&bit_idx STA2
#01 ;&bit_idx LDZ2 NIP #40 SFT SFT
JMP2r

&bit_idx $2


( define your tests here )
 @alloc_sz_is_free_at_idx ( idx* alloc_sz* -- b )
    ;alloc_sz1 STA2
    ;idx1 STA2
    #0000 ;place STA2

    &loop
        ;place LDA2
        ;alloc_sz1 LDA2 EQU2 ,&all_free JCN

        ;place LDA2 ;idx1 LDA2 ADD2
        N_PAGES #0001 SUB2 GTH2 not ,&cont JCN
            #04 .error STZ
            #00 JMP2r

        &cont
            POP2
            ;place LDA2 ;idx1 LDA2 ADD2 get_bit
            #01 EQU not ,&cont1 JCN
                POP2
                #00
                JMP2r
&cont1
            POP2
            ;place LDA2 INC2 ;place STA2 ,&loop JMP

    &all_free
        POP2
        #0001
        JMP2r

@idx1 $2
@place $2
@alloc_sz1 $2


@insert-ptr ( alloc_sz* ptr* -: bool )
#0000 ;&i STA2 ( -- )
&loop
    ;&i LDA2 #0080 EQU2 ,&full JCN ( stop when the map is full ) ( alloc_sz* ptr* )
    ;&i LDA2 ;allocated ADD2 DUP2 LDA2 #0000 NEQ2 ,&cont JCN ( check if a slot in the map is free ) ( alloc_sz* ptr* allocated+i* )
        DUP2 ( alloc_sz* ptr* allocated+i* allocated+i* )
        ROT2 ROT2 ( alloc_sz* allocated+i* ptr* allocated+i* )
        STA2 ( stores ptr* at allocated+i ) ( alloc_sz* allocated+i* )
        #0002 ADD2
        STA2 ( stores alloc_sz* at allocated+i+2 ) ( -- )
        ,&done JMP
    &cont
        POP2 ( alloc_sz* ptr* )
    ;&i LDA2 #0004 ADD2 ;&i STA2
,&loop JMP
&done
#01 JMP2r
&full
POP2 POP2
#00 JMP2r
&i $2

@allocated $80 ( 32 tuples of the page idx and the alloc size )




@claim_alloc_sz_at_idx ( idx* alloc_sz* -- )
    ;alloc_sz3 STA2
    ;idx3 STA2
    #0000 ;place3 STA2

    &loop
        ;place3 LDA2
        ;alloc_sz3 LDA2
        EQU2 ,&done JCN

        POP2
        ;place3 LDA2 ;idx3 LDA2 ADD2
        set_bit

        ;place3 LDA2 INC2 ;place3 STA2
        ,&loop JMP

    &done
    POP2
    JMP2r
    @alloc_sz3 $2
    @idx3 $2
    @place3 $2



@get_bit
;&idx STA2 ;&idx LDA2 #03 SFT2 ;&byte_idx STA2
#0007 ;&idx LDA2 ;&byte_idx LDA2 #30 SFT2 SUB2 SUB2 ;&bit_idx STA2
;&byte_idx LDA2 N_PAGES #0001 SUB2 GTH2 not ,&cont JCN
            #04 .error STZ
&cont
;bitmap ;&byte_idx LDA2 ADD2 LDA ;&byte STA
;&byte LDA ;&bit_idx LDA2 NIP SFT #01 AND
JMP2r

&idx $2
&byte_idx $2
&bit_idx $2
&byte $1



@test-malloc
{ 001a "Test 20 "for 20 "malloc(alloc_sz) 0a } STH2r print-str
    reset
    MAX_ALLOC_SZ malloc ;&ptr STA2
    ;&ptr LDA2 #0000 NEQ2 print-Python-bool nl
    ;&ptr LDA2 free
    get-error #00 EQU ,&cont JCN
        #00 print-Python-bool nl
    &cont

    reset
    MAX_ALLOC_SZ #0002 MUL2 INC2 malloc ;&ptr STA2
    ;&ptr LDA2 #0000 EQU2 get-error #07 EQU AND print-Python-bool nl

    reset
    #0000 malloc ;&ptr STA2
    ;&ptr LDA2 #0000 EQU2 get-error #01 EQU AND  print-Python-bool nl

    #0001 malloc ;&ptr STA2
    ;&ptr LDA2 #0000 NEQ2 get-error #00 EQU AND print-Python-bool nl

    #0010 malloc ;&ptr STA2
    ;&ptr LDA2 free
    get-error #00 EQU print-Python-bool nl
JMP2r
&ptr $2



@set-bitmap-A
    #01 ;bitmap #0001 ADD2 STA
    #80 ;bitmap #0003 ADD2 STA
    #02 ;bitmap #0004 ADD2 STA
    #60 ;bitmap #0008 ADD2 STA
    #04 ;bitmap #000c ADD2 STA
    #20 ;bitmap #000d ADD2 STA
JMP2r

@set-bitmap-B
    #03 ;bitmap #0001 ADD2 STA ( positions: 16=0,15=1 )
    #c0 ;bitmap #0003 ADD2 STA ( positions: 24=1,25=1 )
    #07 ;bitmap #0004 ADD2 STA ( positions: 37=1,38=1 )
    #60 ;bitmap #0008 ADD2 STA ( positions: 65=0,66=1 )
    #0e ;bitmap #000c ADD2 STA ( positions: 100=1,101=1 )
    #30 ;bitmap #000d ADD2 STA ( position: 106=1,107=1 )
JMP2r

( ==================================================== )


(  Constants  )
@PAGE_SZ (  -: a*  ) #0010 JMP2r (  We allocate 16 bytes per page  )
@N_PAGES (  -: a*  ) #0100 JMP2r (  We have a total of 256 pages, so we can allocate at most 4kB  )
@DMEM_START (  -: a*  ) #f000 JMP2r (  Start at 60*1024  )
@MAX_N_ALLOCS (  -: a*  ) #0020 JMP2r (  We can allocate at most 32 regions  )
@MAX_ALLOC_SZ (  -: a*  )
PAGE_SZ N_PAGES MUL2
JMP2r
(  Counter to track number of allocations  )
(  The allocation map is in allocation-map.tal  )
@n_allocs 0000

 (  N_PAGES bits, packed in bytes mean N_PAGES/8 entries, so with the above, the bitmap will take 64 bytes  )
 (  0 means free  )
@bitmap $20


@print-bit #30 ADD #18 DEO JMP2r
@nl #0a18 DEO JMP2r
@ws #2018 DEO JMP2r


@print8 ( b -: )
    DUP ( b b )
    lonib ( b ln )
    h2a ( b lna )
    SWP ( lna b )
    hinib ( lna hn )
    h2a ( lna hna )
    #18 DEO #18 DEO
    JMP2r

@proc-n-items-from-ws
    ROT STHk ( x_1 ... x_n ;proc* n | n )
&loop
        #00 EQU ?&end ( x_1 ... x_n ;proc* | n )
        STH2k ( x_1 ... x_n ;proc* | n ;proc* )
        JSR2 ( x_1 ... x_n-1 | n ;proc* )
        STH2r ( x_1 ... x_n-1 ;proc* | n )
        STHr #01 SUB STHk ( x_1 ... x_n-1 ;proc* n-1 | n-1 )
    !&loop
&end
    POPr
    POP2
JMP2r

@lonib ( a -: b )
    #0f AND
    JMP2r

@hinib ( a -: b )
    #04 SFT
    JMP2r
@not #01 SWP SUB JMP2r

@write-string ( {str}* unit -- )
	STH
    DUP2 LDA2 ( str len )
    SWP2 ( len str )
    INC2 INC2 DUP2  ( len str+2 str+2 )
    ROT2 ADD2 SWP2 ( str+2+len str+2 )
&l ( -- )
    LDAk STHrk DEO
        INC2 GTH2k ?&l
        POP2 POP2
	POPr
JMP2r

@print-str
    #18 !write-string

@print8-dec
    #00 SWP !print-int

@n-dec-digits-in-short
    DUP2 #0000 EQU2 ?&is_zero
    #2710 #0005 ( x:16 d:16 n:16 )
&loop
    ROT2 ROT2 ( n:16 x:16 d:16 )
    DIV2k ( n:16 x:16 d:16 x/d:16 )
    #0000 NEQ2 ?&done_loop ( n:16 x:16 d:16 )
        #000a DIV2 ( n:16 x:16 d/10:16  )
        ROT2 #0001 SUB2 ( x:16 d/10:16 n-1:16 )
        !&loop
&is_zero
        #01
        JMP2r
&done_loop
        POP2 POP2 NIP ( n:8 )
JMP2r

@fmt-dec-short
    DUP2 n-dec-digits-in-short ( x:16 n-dig:8 )
    DUP #01 EQU ?&done ( only one digit => done )
    ,&n-dig STR ( more than one, store it in n-dig )
    #01 ( x:16 1:8 ) ( d[0] xd10 2 )
&loop
    ROT ROT ( 1 x ) ( d[0] 2 xd10 )
    DUP2 ( ct:8 x:16 x:16 ) ( 1 x x ) ( d[0] 2 xd10 xd10 )
    #000a DIV2 DUP2 ( ct:8 x:16 xd10:16 xd10:16 )
    #000a MUL2 ( ct:8 x:16 xd10:16 xr:16 )
    ROT2 SWP2 ( ct:8 xd10:16 x:16 xr:16 )
    SUB2 ( ct:8 xd10:16 d[0]:16 )
    NIP #30 ADD ( ct:8 xd10:16 dl[0]:8 ) ( 1 xd d[0] ) ( d[0] 2 xd100 d[1] )
    ( we need d[0] ct:8 )
    ROT ROT ( ct:8 dl[0]:8 xd10:16 ) ( d[0] 2 d[1] xd100  )
    SWP2 SWP SWP2 ( dl[0]:8 ct:8 xd10:16 ) ( d[0] d[1] 2 xd100  )
    ROT INC DUP  ( dl[0]:8 xd10:16 ct:8+1  )
    ( if ct<5 jump )
    ( #05  )
    LIT &n-dig $1
    LTH ?&loop ( dl[0]:8 xd10:16 2:8 )
&done
    ROT ROT NIP #30 ADD SWP
JMP2r

@print-int
DUP2 #0000 EQU2 ?&zero
fmt-dec-short
{ #18 DEO JMP2r } STH2r !proc-n-items-from-ws
&zero
POP2 #3018 DEO JMP2r

@print-bitmap
#0000 ,&idx STR2
&loop
,&idx LDR2 #0040 EQU2 ,&done JCN
,&idx LDR2 ;bitmap ADD2 LDA print8-dec ws
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2

( if <10 then 30 else 57 )
( implemented as (a<10)*0x30+(a>=10)*0x57 )
( h:8 -- a:8 )
@h2a
    DUP ( h h )
    #0a LTH ( h (h<10) )
    DUP ( h (h<10) )
    #01 SWP SUB ( h (h<10) 1-(h<10) )
    #57 MUL ( h (h<10) (1-(h<10))*0x57 )
    SWP ( h (1-(h<10))*0x57 (h<10) )
    #30 MUL ( h (1-(h<10))*0x57 (h<10)*0x30 )
    ADD ( h (1-(h<10))*0x57 + (h<10)*0x30 )
    ADD ( h+(1-(h<10))*0x57 + (h<10)*0x30 )
    JMP2r

@print-Python-bool
,&true JCN
{ 0005 "False } STH2r print-str
JMP2r
&true
{ 0004 "True } STH2r print-str
JMP2r




(  The allocation happens below this  )
|f000
@vmem