

|0000
@idx $2
@bit_idx $2
@error $1 ( this should be last )


|100
;test-claim_alloc_sz_at_idx JSR2
BRK


@test-claim_alloc_sz_at_idx ( -- )
    { 002d "Test 20 "for 20 "claim_alloc_sz_at_idx(idx,alloc_sz) 0a } STH2r print-str
    ( claim alloc of 1,2,3,4,5 starting at 0 )
    ;bitmap LDA2 STH2 ( stash first 2 bytes )
    { 0006 "part1 0a } STH2r print-str
    #0000 ;bitmap STA2 ( clear the bitmap's first 2 bytes )
    print-bitmap nl
    #0000 #0001 claim_alloc_sz_at_idx ( 1000 000 )
    ;bitmap LDA DUP print8 ws #80 EQU print-bit nl ( OK )
    print-bitmap nl
    #0001 #0002 claim_alloc_sz_at_idx ( 1110 0000, is 1100 0000 )
    ;bitmap LDA DUP print8 ws #e0 EQU print-bit nl ( c0 instead of e0, i.e. 1100 0000 i.o. 1110 0000  )
    print-bitmap nl
    #0003 #0003 claim_alloc_sz_at_idx ( 1111 1100, is 1101 1100 )
    ;bitmap LDA DUP print8 ws #fc EQU print-bit nl
    #0006 #0004 claim_alloc_sz_at_idx ( 1111 1111 1100 0000 , is 1101 1111 1000 0000 )
    ;bitmap LDA DUP print8 ws
    ;bitmap INC LDA DUP print8 ws #ffc0 EQU2 print-bit nl
    #000a #0005 claim_alloc_sz_at_idx ( 1111 1111 1111 1110 , is 1101 1111 1010 1010 )
    ;bitmap LDA DUP print8 ws
    ;bitmap INC LDA DUP print8 ws #fffe EQU2 print-bit nl
    ( restore to previous state )
    STH2r ;bitmap STA2
    { 0006 "part2 0a } STH2r print-str
    #006c #0010 claim_alloc_sz_at_idx
    #007c #0010 alloc_sz_is_free_at_idx #01 EQU print-bit nl
    #006c #0010 alloc_sz_is_free_at_idx #00 EQU print-bit nl
JMP2r



@claim_alloc_sz_at_idx ( idx* alloc_sz* -- )
    ;alloc_sz3 STA2      ( store alloc size )
    ;idx3 STA2           ( store starting idx in .idx )
    #0000 ;jj STA2      ( loop counter jj = 0 )

&loop
    ;jj LDA2
    ;alloc_sz3 LDA2
    EQU2 ,&done JCN     ( if jj >= alloc_sz, jump to done )

    POP2
    ;idx3 LDA2
    ;jj LDA2 ADD2      ( idx + jj )
    set_bit             ( call set_bit with idx + jj )

    ;jj LDA2 INC2 ;jj STA2  ( jj += 1 )
    ,&loop JMP

&done
POP2
JMP2r

@alloc_sz3 $2
@idx3      $2
@jj       $2


@alloc_sz_is_free_at_idx (  idx* alloc_sz* -: b  )
    ;alloc_sz STA2 .idx STZ2
    ;alloc_sz LDA2 ;end_alloc STA2k (  alloc_sz loaded, stored at end_alloc and kept on stack  )
    (  snippet: if idx+jj>N_PAGES-1: error=4  )
    N_PAGES #01 SUB GTH ,&ret_0_error4 JCN ,&next JMP (  stack: end_alloc N_PAGES-1 --> end_alloc N_PAGES-1 0 or 1  )
    &next
        POP2 POP2 POP2 (  stack: empty  )
        ;end_alloc LDA2 ;start LDA2 NEQ ,&loop JCN ,&all_free JMP    (  stack: 01 or 00, if 01 jump to loop, else jump to all_free  )

    &ret_0_error4
        #04 .error STZ
        POP2 POP2 POP2 #00 JMP2r

    &loop  (  stack: 0000 end_alloc 01  )
        get_bit EQU2 ,&not_free JCN .&next2 JMP (  stack: 0000 or 0001  )
        &next2 ( stack: 0000  )
            POP2 (  stack:  )
            .idx LDZ2 INC2 .idx STZ2 (  stack:   )
            ;end_alloc LDA2 ;start LDA2 #0001 ADD2 ;start STA2 (  stack: end_alloc start position incremented )
            NEQ ,&loop JCN     (  stack: 01 or 00, if 01 jump to loop, else jump to all_free  )
            ,&all_free JMP

    &not_free (  stack: 01 )
        POP2
        #0000 (  stack: 00  )
        JMP2r

    &all_free (  stack: 00  )
        POP2
        #0001
        JMP2r (  stack: 01  )
    JMP2r
    @start 0000
    @alloc_sz $2
    @end_alloc $2



@get_bit
;&idx STA2 ;&idx LDA2 #03 SFT2 ;&byte_idx STA2
#0007 ;&idx LDA2 ;&byte_idx LDA2 #30 SFT2 SUB2 SUB2 ;&bit_idx STA2
;&byte_idx LDA2 N_PAGES #0001 SUB2 GTH2 not ,&cont JCN
            #04 .error STZ
&cont
;bitmap ;&byte_idx LDA2 ADD2 LDA ;&byte STA
;&byte LDA ;&bit_idx LDA2 NIP SFT #01 AND
JMP2r

&idx $2
&byte_idx $2
&bit_idx $2
&byte $1



@set_bit ( idx -- )
;&idx STA2
;&idx LDA2
#03 SFT2 ;&byte_idx STA2
#0007 ;&idx LDA2 ;&byte_idx LDA2 #30 SFT2 ADD2 SUB2 ;&bit_idx STA2
;bitmap ;&byte_idx LDA2 ADD2 LDA ;&byte STA

;&byte LDA ;&bit_idx LDA2 mask_set ORA ;bitmap ;&byte_idx LDA2 ADD2  STA ( stack:  ) ( load byte needed do or with mask so whole byte is correct then store it )
JMP2r

&idx $2
&byte_idx $2
&bit_idx $2
&byte $1


@not #01 SWP SUB JMP2r


@mask_set ( bit_idx* -: mask )
.bit_idx STZ2
#01 .bit_idx LDZ2 NIP #40 SFT SFT
JMP2r


@N_PAGES #0100 JMP2r
@bitmap $20
@print-bit #30 ADD #18 DEO JMP2r
@nl #0a18 DEO JMP2r
@ws #2018 DEO JMP2r


@print8 ( b -: )
    DUP ( b b )
    lonib ( b ln )
    h2a ( b lna )
    SWP ( lna b )
    hinib ( lna hn )
    h2a ( lna hna )
    #18 DEO #18 DEO
    JMP2r

@proc-n-items-from-ws
    ROT STHk ( x_1 ... x_n ;proc* n | n )
    &loop
        #00 EQU ?&end ( x_1 ... x_n ;proc* | n )
        STH2k ( x_1 ... x_n ;proc* | n ;proc* )
        JSR2 ( x_1 ... x_n-1 | n ;proc* )
        STH2r ( x_1 ... x_n-1 ;proc* | n )
        STHr #01 SUB STHk ( x_1 ... x_n-1 ;proc* n-1 | n-1 )
    !&loop
    &end
    POPr
    POP2
JMP2r

@lonib ( a -: b )
    #0f AND
    JMP2r

@hinib ( a -: b )
    #04 SFT
    JMP2r


@write-string ( {str}* unit -- )
	STH
    DUP2 LDA2 ( str len )
    SWP2 ( len str )
    INC2 INC2 DUP2  ( len str+2 str+2 )
    ROT2 ADD2 SWP2 ( str+2+len str+2 )
    &l ( -- )
    LDAk STHrk DEO
        INC2 GTH2k ?&l
        POP2 POP2
	POPr
JMP2r

@print-str
    #18 !write-string

@print8-dec
    #00 SWP !print-int

@n-dec-digits-in-short
    DUP2 #0000 EQU2 ?&is_zero
    #2710 #0005 ( x:16 d:16 n:16 )
    &loop
    ROT2 ROT2 ( n:16 x:16 d:16 )
    DIV2k ( n:16 x:16 d:16 x/d:16 )
    #0000 NEQ2 ?&done_loop ( n:16 x:16 d:16 )
        #000a DIV2 ( n:16 x:16 d/10:16  )
        ROT2 #0001 SUB2 ( x:16 d/10:16 n-1:16 )
        !&loop
    &is_zero
        #01
        JMP2r
    &done_loop
        POP2 POP2 NIP ( n:8 )
JMP2r

@fmt-dec-short
    DUP2 n-dec-digits-in-short ( x:16 n-dig:8 )
    DUP #01 EQU ?&done ( only one digit => done )
    ,&n-dig STR ( more than one, store it in n-dig )
    #01 ( x:16 1:8 ) ( d[0] xd10 2 )
    &loop
    ROT ROT ( 1 x ) ( d[0] 2 xd10 )
    DUP2 ( ct:8 x:16 x:16 ) ( 1 x x ) ( d[0] 2 xd10 xd10 )
    #000a DIV2 DUP2 ( ct:8 x:16 xd10:16 xd10:16 )
    #000a MUL2 ( ct:8 x:16 xd10:16 xr:16 )
    ROT2 SWP2 ( ct:8 xd10:16 x:16 xr:16 )
    SUB2 ( ct:8 xd10:16 d[0]:16 )
    NIP #30 ADD ( ct:8 xd10:16 dl[0]:8 ) ( 1 xd d[0] ) ( d[0] 2 xd100 d[1] )
    ( we need d[0] ct:8 )
    ROT ROT ( ct:8 dl[0]:8 xd10:16 ) ( d[0] 2 d[1] xd100  )
    SWP2 SWP SWP2 ( dl[0]:8 ct:8 xd10:16 ) ( d[0] d[1] 2 xd100  )
    ROT INC DUP  ( dl[0]:8 xd10:16 ct:8+1  )
    ( if ct<5 jump )
    ( #05  )
    LIT &n-dig $1
    LTH ?&loop ( dl[0]:8 xd10:16 2:8 )
    &done
    ROT ROT NIP #30 ADD SWP
JMP2r

@print-int
DUP2 #0000 EQU2 ?&zero
fmt-dec-short
{ #18 DEO JMP2r } STH2r !proc-n-items-from-ws
&zero
POP2 #3018 DEO JMP2r

@print-bitmap
#0000 ,&idx STR2
&loop
,&idx LDR2 #0040 EQU2 ,&done JCN
,&idx LDR2 ;bitmap ADD2 LDA print8-dec ws
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2

( if <10 then 30 else 57 )
( implemented as (a<10)*0x30+(a>=10)*0x57 )
( h:8 -- a:8 )
@h2a
    DUP ( h h )
    #0a LTH ( h (h<10) )
    DUP ( h (h<10) )
    #01 SWP SUB ( h (h<10) 1-(h<10) )
    #57 MUL ( h (h<10) (1-(h<10))*0x57 )
    SWP ( h (1-(h<10))*0x57 (h<10) )
    #30 MUL ( h (1-(h<10))*0x57 (h<10)*0x30 )
    ADD ( h (1-(h<10))*0x57 + (h<10)*0x30 )
    ADD ( h+(1-(h<10))*0x57 + (h<10)*0x30 )
    JMP2r



