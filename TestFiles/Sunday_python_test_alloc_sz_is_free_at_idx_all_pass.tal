|0000
@error $1

|0100
( unit tests )

set-bitmap-B

test-alloc_sz_is_free_at_idx

BRK

( define your tests here )
 @alloc_sz_is_free_at_idx ( idx* alloc_sz* -- b )
    ;alloc_sz1 STA2
    ;idx1 STA2
    #0000 ;place STA2

    &loop
        ;place LDA2
        ;alloc_sz1 LDA2 EQU2 ,&all_free JCN

        ;place LDA2 ;idx1 LDA2 ADD2
        N_PAGES #0001 SUB2 GTH2 not ,&cont JCN
            #04 .error STZ
            #00 JMP2r

        &cont
            POP2
            ;place LDA2 ;idx1 LDA2 ADD2 get_bit
            #01 EQU not ,&cont1 JCN
                POP2
                #00
                JMP2r
&cont1
            POP2
            ;place LDA2 INC2 ;place STA2 ,&loop JMP

    &all_free
        POP2
        #0001
        JMP2r

@idx1 $2
@place $2
@alloc_sz1 $2



@get_bit
;&idx STA2 ;&idx LDA2 #03 SFT2 ;&byte_idx STA2
#0007 ;&idx LDA2 ;&byte_idx LDA2 #30 SFT2 SUB2 SUB2 ;&bit_idx STA2
;&byte_idx LDA2 N_PAGES #0001 SUB2 GTH2 not ,&cont JCN
            #04 .error STZ
&cont
;bitmap ;&byte_idx LDA2 ADD2 LDA ;&byte STA
;&byte LDA ;&bit_idx LDA2 NIP SFT #01 AND
JMP2r

&idx $2
&byte_idx $2
&bit_idx $2
&byte $1


@test-alloc_sz_is_free_at_idx ( -- )
    { 002f "Test 20 "for 20 "alloc_sz_is_free_at_idx(idx,alloc_sz) 0a } STH2r print-str
( All 0 )
    { 0006 "part1 0a } STH2r print-str
     #000f #0001 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     #000f #0002 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     #000f #0004 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     #000f #0008 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     #000f #0010 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     { 0006 "part2 0a } STH2r print-str
( Last is 0 because 24 is set )
     #0010 #0001 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0010 #0002 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0010 #0004 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0010 #0008 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0010 #0010 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     { 0006 "part3 0a } STH2r print-str
( 11100 because 24 is set )
     #0011 #0001 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0011 #0002 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0011 #0004 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
     #0011 #0008 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     #0011 #0010 alloc_sz_is_free_at_idx #00 EQU print-Python-bool nl
     { 0006 "part4 0a } STH2r print-str
( All one )
    #006c #0001 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
    #006c #0002 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
    #006c #0004 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
    #006c #0008 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
    #006c #0010 alloc_sz_is_free_at_idx #01 EQU print-Python-bool nl
JMP2r



@set-bitmap-A
    #01 ;bitmap #0001 ADD2 STA
    #80 ;bitmap #0003 ADD2 STA
    #02 ;bitmap #0004 ADD2 STA
    #60 ;bitmap #0008 ADD2 STA
    #04 ;bitmap #000c ADD2 STA
    #20 ;bitmap #000d ADD2 STA
JMP2r

@set-bitmap-B
    #03 ;bitmap #0001 ADD2 STA ( positions: 16=0,15=1 )
    #c0 ;bitmap #0003 ADD2 STA ( positions: 24=1,25=1 )
    #07 ;bitmap #0004 ADD2 STA ( positions: 37=1,38=1 )
    #60 ;bitmap #0008 ADD2 STA ( positions: 65=0,66=1 )
    #0e ;bitmap #000c ADD2 STA ( positions: 100=1,101=1 )
    #30 ;bitmap #000d ADD2 STA ( position: 106=1,107=1 )
JMP2r

( ==================================================== )

@N_PAGES #0100 JMP2r
@bitmap $20
@print-bit #30 ADD #18 DEO JMP2r
@nl #0a18 DEO JMP2r
@ws #2018 DEO JMP2r


@print8 ( b -: )
    DUP ( b b )
    lonib ( b ln )
    h2a ( b lna )
    SWP ( lna b )
    hinib ( lna hn )
    h2a ( lna hna )
    #18 DEO #18 DEO
    JMP2r

@proc-n-items-from-ws
    ROT STHk ( x_1 ... x_n ;proc* n | n )
&loop
        #00 EQU ?&end ( x_1 ... x_n ;proc* | n )
        STH2k ( x_1 ... x_n ;proc* | n ;proc* )
        JSR2 ( x_1 ... x_n-1 | n ;proc* )
        STH2r ( x_1 ... x_n-1 ;proc* | n )
        STHr #01 SUB STHk ( x_1 ... x_n-1 ;proc* n-1 | n-1 )
    !&loop
&end
    POPr
    POP2
JMP2r

@lonib ( a -: b )
    #0f AND
    JMP2r

@hinib ( a -: b )
    #04 SFT
    JMP2r
@not #01 SWP SUB JMP2r

@write-string ( {str}* unit -- )
	STH
    DUP2 LDA2 ( str len )
    SWP2 ( len str )
    INC2 INC2 DUP2  ( len str+2 str+2 )
    ROT2 ADD2 SWP2 ( str+2+len str+2 )
&l ( -- )
    LDAk STHrk DEO
        INC2 GTH2k ?&l
        POP2 POP2
	POPr
JMP2r

@print-str
    #18 !write-string

@print8-dec
    #00 SWP !print-int

@n-dec-digits-in-short
    DUP2 #0000 EQU2 ?&is_zero
    #2710 #0005 ( x:16 d:16 n:16 )
&loop
    ROT2 ROT2 ( n:16 x:16 d:16 )
    DIV2k ( n:16 x:16 d:16 x/d:16 )
    #0000 NEQ2 ?&done_loop ( n:16 x:16 d:16 )
        #000a DIV2 ( n:16 x:16 d/10:16  )
        ROT2 #0001 SUB2 ( x:16 d/10:16 n-1:16 )
        !&loop
&is_zero
        #01
        JMP2r
&done_loop
        POP2 POP2 NIP ( n:8 )
JMP2r

@fmt-dec-short
    DUP2 n-dec-digits-in-short ( x:16 n-dig:8 )
    DUP #01 EQU ?&done ( only one digit => done )
    ,&n-dig STR ( more than one, store it in n-dig )
    #01 ( x:16 1:8 ) ( d[0] xd10 2 )
&loop
    ROT ROT ( 1 x ) ( d[0] 2 xd10 )
    DUP2 ( ct:8 x:16 x:16 ) ( 1 x x ) ( d[0] 2 xd10 xd10 )
    #000a DIV2 DUP2 ( ct:8 x:16 xd10:16 xd10:16 )
    #000a MUL2 ( ct:8 x:16 xd10:16 xr:16 )
    ROT2 SWP2 ( ct:8 xd10:16 x:16 xr:16 )
    SUB2 ( ct:8 xd10:16 d[0]:16 )
    NIP #30 ADD ( ct:8 xd10:16 dl[0]:8 ) ( 1 xd d[0] ) ( d[0] 2 xd100 d[1] )
    ( we need d[0] ct:8 )
    ROT ROT ( ct:8 dl[0]:8 xd10:16 ) ( d[0] 2 d[1] xd100  )
    SWP2 SWP SWP2 ( dl[0]:8 ct:8 xd10:16 ) ( d[0] d[1] 2 xd100  )
    ROT INC DUP  ( dl[0]:8 xd10:16 ct:8+1  )
    ( if ct<5 jump )
    ( #05  )
    LIT &n-dig $1
    LTH ?&loop ( dl[0]:8 xd10:16 2:8 )
&done
    ROT ROT NIP #30 ADD SWP
JMP2r

@print-int
DUP2 #0000 EQU2 ?&zero
fmt-dec-short
{ #18 DEO JMP2r } STH2r !proc-n-items-from-ws
&zero
POP2 #3018 DEO JMP2r

@print-bitmap
#0000 ,&idx STR2
&loop
,&idx LDR2 #0040 EQU2 ,&done JCN
,&idx LDR2 ;bitmap ADD2 LDA print8-dec ws
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2

( if <10 then 30 else 57 )
( implemented as (a<10)*0x30+(a>=10)*0x57 )
( h:8 -- a:8 )
@h2a
    DUP ( h h )
    #0a LTH ( h (h<10) )
    DUP ( h (h<10) )
    #01 SWP SUB ( h (h<10) 1-(h<10) )
    #57 MUL ( h (h<10) (1-(h<10))*0x57 )
    SWP ( h (1-(h<10))*0x57 (h<10) )
    #30 MUL ( h (1-(h<10))*0x57 (h<10)*0x30 )
    ADD ( h (1-(h<10))*0x57 + (h<10)*0x30 )
    ADD ( h+(1-(h<10))*0x57 + (h<10)*0x30 )
    JMP2r

@print-Python-bool
,&true JCN
{ 0005 "False } STH2r print-str
JMP2r
&true
{ 0004 "True } STH2r print-str
JMP2r