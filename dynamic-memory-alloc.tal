(
 Dynamic memory allocation using pages, a bitmap and an allocation map
)

( This is the suggested code skeleton for AE1
  it also provides helper functions for printing

  Replace `!todo` with your implementation for each function, 
  based on the Python reference

  "snippet" means a bit of code that you can use in your solution
)

(
  Rename this file to 
    dynamic-memory-alloc.tal
)

( zero page declarations should go into
    dynamic-memory-alloc-decls.tal
)

( definitions of malloc, free and functions used to implement them )
@malloc ( n_bytes* -- <allocation in bytes> )
    ( You are free to change this part but there should be no need )
    #00 .error STZ
    DUP2 ( n_bytes* n_bytes* )
    DUP2 ( n_bytes* n_bytes* n_bytes* )
    #0000 NEQ2 ,&cont1 JCN
        POP2 POP2
        #01 .error STZ
        #0000 JMP2r 
    &cont1 ( n_bytes* n_bytes* )
    #0001 SUB2 PAGE_SZ DIV2 #0001 ADD2 .n_pages STZ2 ( n_bytes* n_pages = ((n_bytes-1) // PAGE_SZ) + 1 )
    .n_pages LDZ2 N_PAGES GTH2 not ,&cont2 JCN ( n_pages>N_PAGES )
        POP2
        #07 .error STZ
        #0000 JMP2r 
    &cont2
    #0000 ;&idx STA2 ( n_bytes* ) ( idx=0 )

    !todo ( loop over idx )

    ( the following snippets are for error handling )
            
            ( snippet: error > 0 )
            .error LDZ #00 EQU ,&cont3 JCN
                #0000 JMP2r
            &cont3
            
            ( snippet: n_allocs == MAX_N_ALLOCS )
            ;n_allocs LDA2 DUP2 MAX_N_ALLOCS NEQ2 ,&cont4 JCN
                #05 .error STZ
                #0000 JMP2r
            &cont4

    ( snippet: allocated[ptr]=n_bytes )
        insert-ptr POP ( lazy, ignore return status )
JMP2r
&idx $2

@free ( ptr* -- )
    ( You are free to change this part but there should be no need )
    DUP2 ;&ptr STA2 ( ptr* )
    DMEM_START SUB2 PAGE_SZ DIV2 ( idx* = (ptr-DMEM_START) // PAGE_SZ )
    ( if idx<0 or idx>N_PAGES-1: error=2 )
    DUP2 DUP2 ( idx* idx* idx* )
    #0000 LTH2 ( idx* idx* idx<0 )
    ROT ROT ( idx* idx<0 idx* )
    N_PAGES #0001 SUB2 GTH2 ( idx* idx<0 idx>N_PAGES-1 )
    ORA not ,&cont JCN ( idx* )
        #02 .error STZ
        JMP2r
    &cont ( idx* )
    ( this corresponds to 
        if ptr in allocated
    )
    ;&ptr LDA2 lookup-ptr
    ( check if lookup-ptr returned 0000 
        if so, error=0 else error=6
    )
    DUP2 #0000 EQU2 ,&error6 JCN ( idx* n_bytes* )
    #00 .error STZ

    !todo

    ( snippet: )
    ( this corresponds to 
        del allocated[ptr]
    )
    ;&ptr LDA2 delete-ptr

    ( You are free to change this part but there should be no need )
    JMP2r
    &error6 
        #06 .error STZ 
    JMP2r
&ptr $2   

( allocation size is in pages )
( idx:16 alloc_sz:16 -- 00 or 01 )
@alloc_sz_is_free_at_idx ( idx* alloc_sz* -: b )
    !todo
    ;alloc_sz LDA2 ;end_alloc STA2k ( alloc_sz loaded, stored at end_alloc and kept on stack )
    ( snippet: if idx+jj>N_PAGES-1: error=4 )
    N_PAGES #01 SUB GTH ,&ret_0_error4 JCN  ( stack: end_alloc N_PAGES-1 --> end_alloc N_PAGES-1 0 or 1 )
        &ret_0_error4 
            #04 .error STZ
            POP2 POP2 POP2 #00 JMP2r
    POP2 POP2 POP2 ( stack: empty )
    ;start LDA2 ;end_alloc LDA2 NEQ ,&loop JCN     ( stack: 0000 end_alloc 01 or 00, if 01 jump to loop, else jump to done )
    ,&done JMP         ( jump to done if start value == end_alloc )
    &loop  ( stack: 0000 end_alloc 01 )
        get_bit EQU2 ,&not_free JCN ( stack: 0000 end_alloc 01 00 or 01 )
        POP2 POP2 ( stack: 0000 end_alloc )
        ,&idx LDR2 INC2 ,&idx STR2 ( stack: 0000 end_alloc )
        SWP2 POP2 ( stack: end_alloc )
        ;start LDA2 INC2 ;start STAk ( stack: end_alloc start)
        NEQ ,&loop JCN     ( stack: end_alloc start 01 or 00, if 01 jump to loop, else jump to done )
        ,&all_free JMP

    &not_free ( stack: 0000 end_alloc 01 01)
        POP2 POP2 POP2 POP2
        #00 ( stack: 00 )
        JMP2r

    &done ( stack: 0000 end_alloc 00 )
        POP2 POP2 POP2
        JMP2r

    &all_free ( stack: end_alloc start 00 )
        POP2 POP2 POP2
        #01
        JMP2r ( stack: 01 )
    JMP2r
    @start 0000
    @end_alloc $2


( allocation size is in pages )
@claim_alloc_sz_at_idx ( idx* alloc_sz* -: ) 
    !todo

( allocation size is in pages )
@free_alloc_sz_at_idx ( idx* alloc_sz* -: ) 
    !todo


@get_bit ( idx -- bit )
!todo
find_byte N_PAGES #01 SUB2 GTH2
,&ret_0_error4 JCN  ( stack: end_alloc N_PAGES-1 --> end_alloc N_PAGES-1 0 or 1 )
        &ret_0_error4
            #04 .error STZ
            POP2 POP2 POP2 #00 JMP2r
find_bit #01 AND ( finds bit then loads 01 and does bitwise AND - value of bit will be left on stack)
JMP2r

@set_bit ( idx -- )
!todo
find_bit
mask_set
JMP2r

@clear_bit ( idx -- )
!todo
find_bit
mask_clear
JMP2r

@mask_clear ( bit_idx* -: mask )
.bit_idx STZ2 #ff [ #01 .bit_idx LDZ2 NIP #40 SFT SFT ] EOR
JMP2r

@mask_set ( bit_idx* -: mask )
.bit_idx STZ2
#01 .bit_idx LDZ2 NIP #40 SFT SFT
JMP2r


@find_byte
.&idx LDA2 #03 SFT ( divides idx by 8 to give byte position )
( stack: idx//8 )
;bitmap ADD2 LDA2 LDA2 ( gets bitmap address, adds byte address to it, loads address, loads byte )
( stack: address byte )
SWP2 POP2 ;byte STA2 ( stack:  )
JMP2r
@byte $2

@find_bit
find_byte
.&idx LDA2 DUP2 #33SFT2 SUB2 ( loads idx and duplicates. Shifts right and left to get top hex digit isolated. Takes this away from the idx lower on the stack to get remainder - bit position )
( stack: bit position LtoR )
#07 SWP2 SUB2 NIP ( this line flips round bit placement as uxntal starts with position 0 on the right. The result is the uxntal bit position. NIP to just get lower nibble. The result is stored and kept on the stack)
( stack: bit position RtoL )
;byte LDA2 LDA2 SWP2 POP2 ( loads byte address loads byte swaps position to pop address) 
SWP2 SFT NIP ( swaps order so bit position at top of stack, shifts to get bit at position 0, nips to isolate just that bit )
( stack: just bit we want )
JMP2r

( ==================================================== )
( Functions for handling the allocation dictionary )
( Also contains the map of allocated pointers and their sizes )
~allocation-map.tal
( ==================================================== )
( Functions for printing )
~fmt-print.tal
~print-extra.tal
( ==================================================== )
( This resets memory, allocated and n_allocs for test purposes )
@reset
    #00 .error STZ
    #0000 ;n_allocs STA2
    clear-bitmap
    clear-allocation
    clear-vmem



@clear-bitmap
#0000 ,&idx STR2 ( #0000 is being stored to &idx )
&loop (loop start)
,&idx LDR2 #0040 EQU2 ,&done JCN ( get value of idx and load it )
( put #0040 on the stack. Check if idx is equal - have we got to end of bitmap. )
( If true jump to done, else continue with loop )

#00 ,&idx LDR2 ;bitmap ADD2 STA
( loads #00 on the stack, loads idx, loads bitmap start )
( idx and bitmap are added to get correct bit position )
( 00 is stored at this position )

,&idx LDR2 INC2 ,&idx STR2
( load value at idx and increment by 1, store this back at idx )

,&loop JMP ( loop continues until all values are zero )
&done
JMP2r
&idx $2


@clear-vmem
#0000 ,&idx STR2
&loop
,&idx LDR2 #1000 EQU2 ,&done JCN
#00 ,&idx LDR2 ;vmem ADD2 STA
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2
( ==================================================== )
( For debugging )
@print-bitmap
#0000 ,&idx STR2
&loop
,&idx LDR2 #0040 EQU2 ,&done JCN
,&idx LDR2 ;bitmap ADD2 LDA print8-dec ws
,&idx LDR2 INC2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2

@print-allocated
#0000 ,&idx STR2
&loop
,&idx LDR2 #0080 EQU2 ,&done JCN
,&idx LDR2 ;allocated ADD2 LDA2 print16-dec ws
,&idx LDR2 ;allocated ADD2 #0002 ADD2 LDA2 print16-dec ws
,&idx LDR2 #0004 ADD2 ,&idx STR2
,&loop JMP
&done
JMP2r
&idx $2
( ==================================================== )
( b :- not_b )
@not #01 SWP SUB JMP2r
( ==================================================== )
( Functions for error handling )

@report-error ( erc -- )
    #00 SWP #0002 MUL2 ;errors ADD2 LDA2 JSR2
    JMP2r

@get-error
    .error LDZ
    JMP2r

( error strings )
@errors =no-error =null-ptr =invalid-ptr =invalid-access =outside-page =max-alloc =ptr-not-alloc =alloc-too-large
( errors )
( 0 )
@no-error JMP2r
( 1 )
@null-ptr { 000c "Null 20 "pointer } STH2r !print-str
( 2 )
@invalid-ptr { 000f "Invalid 20 "pointer } STH2r !print-str
( 3 )
@invalid-access { 000f "Invalid 20 "access: } STH2r !print-str
( 4 )
@outside-page { 0016 "Outside 20 "of 20 "page 20 "range: } STH2r !print-str
( 5 )
@max-alloc { 0021 "Max 20 "number 20 "of 20 "allocations 20 "reached } STH2r !print-str
( 6 )
@ptr-not-alloc { 0019 "Pointer 20 "was 20 "not 20 "allocated } STH2r !print-str
( 7 )
@alloc-too-large { 0014 "Allocation 20 "too 20 "large  } STH2r !print-str

( END of functions for error handling )
( ==================================================== )

( Constants )
@PAGE_SZ ( -: a* ) #0010 JMP2r ( We allocate 16 bytes per page )
@N_PAGES ( -: a* ) #0100 JMP2r ( We have a total of 256 pages, so we can allocate at most 4kB )
@DMEM_START ( -: a* ) #f000 JMP2r ( Start at 60*1024 )
@MAX_N_ALLOCS ( -: a* ) #0020 JMP2r ( We can allocate at most 32 regions )
@MAX_ALLOC_SZ ( -: a* )  
PAGE_SZ N_PAGES MUL2
JMP2r
( Counter to track number of allocations )
( The allocation map is in allocation-map.tal )
@n_allocs 0000

 ( N_PAGES bits, packed in bytes mean N_PAGES/8 entries, so with the above, the bitmap will take 64 bytes )
 ( 0 means free )
@bitmap $40

( The allocation happens below this )
|f000
@vmem