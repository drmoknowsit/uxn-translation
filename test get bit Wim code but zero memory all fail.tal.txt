( Unit tests for dynamic memory allocation code )
|0000
( I suggest you use the zero page for temporary storage )
( all your allocations here )
@idx $2
@byte $2
@byte_idx $2
@byte-address $2
@n_pages $2
@bit_idx $2
@error $1 ( this should be last )

|0100
( unit tests )

;test-get_bit JSR2
BRK





@get_bit ( idx -- bit ) 
 .idx STZ2
 find_byte .byte-address LDZ2 N_PAGES #01 SUB2 GTH2 
 ,&ret_0_error4 JCN  
 ,&cont_get JMP 
         &ret_0_error4
             #04 .error STZ
             POP2 POP2 POP2 #00 JMP2r
             POP2 POP2 POP2 #00 JMP2r 
 &cont_get
 POP2 POP2 POP2 
 find_bit #01 AND 
 JMP2r

@not #01 SWP SUB JMP2r

@find_byte
 .idx LDZ2 #03 SFT .byte_idx STZ2k ( divides idx by 8 to give byte position which is then stored )
 ( stack: byte_idx )
 ;bitmap ADD2 .byte-address STZk2 LDA 
 SWP2 POP2 .byte STZ2 ( stack:  ) ( stores byte value to .byte )
 JMP2r




@find_bit ( finds bit_idx )
.idx LDZ2
find_byte 
.idx LDZ2 DUP2 #33 SFT2 SUB2 
#0007 SWP2 SUB2 NIP 
( SWP2 SFT NIP .bit_idx STZ2 ) 
( swaps order so bit position at top of stack, shifts to get bit at position 0, nips to isolate just that bit. Bit is then stored in .bit_idx )
( stack: )
JMP2r


( In both cases, read bits that are set and not set )
@test-get_bit ( -- )
    { 0016 "Test 20 "for 20 "get_bit(idx) 0a } STH2r print-str
    (
    #01 ;bitmap #0001 ADD2 STA ( positions: 16=1,15=0 )
    #80 ;bitmap #0003 ADD2 STA ( positions: 24=1,25=0 )
    #02 ;bitmap #0004 ADD2 STA ( positions: 38=1,39=0 )
    #60 ;bitmap #0008 ADD2 STA ( positions: 65=1,66=1 )
    #04 ;bitmap #000c ADD2 STA ( positions: 101=1,102=0 )
    #20 ;bitmap #000d ADD2 STA ( position: 106=1,107=0 )
    )
    set-bitmap-A

    #0010 get_bit #00 EQU #000f get_bit #01 EQU AND print-bit nl
    #0018 get_bit #01 EQU #0019 get_bit #00 EQU AND print-bit nl
    #0026 get_bit #01 EQU #0027 get_bit #00 EQU AND print-bit nl
    #0041 get_bit #01 EQU #0042 get_bit #01 EQU AND print-bit nl
    #0065 get_bit #01 EQU #0066 get_bit #00 EQU AND print-bit nl
    #006a get_bit #01 EQU #006b get_bit #00 EQU AND print-bit nl

    set-bitmap-B

    #0010 get_bit #00 EQU #000f get_bit #01 EQU AND print-bit nl
    #0018 get_bit #01 EQU #0019 get_bit #01 EQU AND print-bit nl
    #0026 get_bit #01 EQU #0025 get_bit #01 EQU AND print-bit nl
    #0041 get_bit #01 EQU #0042 get_bit #01 EQU AND print-bit nl
    #0064 get_bit #01 EQU #0065 get_bit #01 EQU AND print-bit nl
    #006a get_bit #01 EQU #006b get_bit #01 EQU AND print-bit nl

JMP2r

@set-bitmap-A
    #01 ;bitmap #0001 ADD2 STA
    #80 ;bitmap #0003 ADD2 STA
    #02 ;bitmap #0004 ADD2 STA
    #60 ;bitmap #0008 ADD2 STA
    #04 ;bitmap #000c ADD2 STA
    #20 ;bitmap #000d ADD2 STA
JMP2r

@set-bitmap-B
    #03 ;bitmap #0001 ADD2 STA ( positions: 16=0,15=1 )
    #c0 ;bitmap #0003 ADD2 STA ( positions: 24=1,25=1 )
    #07 ;bitmap #0004 ADD2 STA ( positions: 37=1,38=1 )
    #60 ;bitmap #0008 ADD2 STA ( positions: 65=0,66=1 )
    #0e ;bitmap #000c ADD2 STA ( positions: 100=1,101=1 )
    #30 ;bitmap #000d ADD2 STA ( position: 106=1,107=1 )
JMP2r

( ==================================================== )

@N_PAGES #0100 JMP2r
@bitmap $40
@print-bit #30 ADD #18 DEO JMP2r
@nl #0a18 DEO JMP2r
@print-str 
    #18 !write-string

@write-string ( {str}* unit -- )
	STH
    DUP2 LDA2 ( str len )
    SWP2 ( len str )
    INC2 INC2 DUP2  ( len str+2 str+2 )
    ROT2 ADD2 SWP2 ( str+2+len str+2 )
&l ( -- )
    LDAk STHrk DEO
        INC2 GTH2k ?&l
        POP2 POP2 
	POPr
JMP2r

 